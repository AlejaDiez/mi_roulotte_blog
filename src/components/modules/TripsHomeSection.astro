---
import { TripsTable } from "@db/trips";
import { drizzle } from "drizzle-orm/d1";
import { desc, eq, sql } from "drizzle-orm";
import { tripDate } from "@utils/datetime";

const query = drizzle(Astro.locals.runtime.env.DB)
    .select({
        name: TripsTable.name,
        date: TripsTable.date,
        description: TripsTable.description,
        image: TripsTable.image,
        video: TripsTable.video,
        url: sql<string>`CONCAT('/', ${TripsTable.id})`
    })
    .from(TripsTable)
    .where(eq(TripsTable.published, true))
    .orderBy(desc(TripsTable.date));
const data = await query;
---

<section
    id="viajes"
    class="max-md:aspect-portrait md:**:animation-paused relative w-full overflow-hidden select-none max-md:scroll-mt-(--space-y) md:h-screen md:w-screen md:snap-start">
    <div
        class="subtitle animate-clip-left md:animate-clip-top bg-primary absolute top-0 z-10 flex h-(--space-y) w-(--space-y) items-center justify-center overflow-hidden max-md:left-0 md:top-(--space-y) md:right-[calc(var(--space-overflow)+50%)]">
        {
            data?.map(({}, i) => (
                <span
                    class:list={{ selected: i === 0 }}
                    class="text-subtitle text-primary-foreground absolute text-center">
                    {i + 1}
                </span>
            ))
        }
    </div>
    <div
        class="title animate-float-right md:bg-muted md:animate-clip-right absolute top-(--space-y) left-0 z-10 flex h-[calc(100%-3.5rem-4*var(--space)-var(--space-y))] w-(--space-y) items-end justify-center overflow-hidden max-md:mask-b-to-10 max-md:mask-exclude md:top-[calc(var(--space-y)*2)] md:h-64 md:w-1/2 md:items-center md:justify-start md:pr-[calc(var(--space-x)/2)] md:pl-(--space-x)">
        {
            data?.map(({ date, name }, i) => (
                <>
                    <span
                        class:list={{ selected: i === 0 }}
                        class="text-label text-muted-foreground-variant absolute top-1/4 max-md:hidden">
                        {tripDate(date!)}
                    </span>
                    <h1
                        class:list={{ selected: i === 0 }}
                        class="text-title max-md:text-vertical absolute max-md:rotate-180 max-md:whitespace-nowrap md:line-clamp-1">
                        {name}
                    </h1>
                </>
            ))
        }
    </div>
    <div
        class="content animation-delay-[375ms] animate-fade absolute bottom-0 left-0 h-14 w-[calc(100%-3.5rem-4*var(--space))] overflow-hidden md:bottom-(--space-y) md:left-(--space-x) md:h-[calc(100%-var(--space-y)*3-var(--spacing)*64-var(--space-between))] md:w-[calc(50%-var(--space-x)-var(--space-overflow)-var(--space-y))]">
        {
            data?.map(({ description, url, video }, i) => (
                <div
                    class:list={{ selected: i === 0 }}
                    class="absolute flex h-full w-full flex-col items-start justify-start gap-[calc(var(--space)*2)]">
                    <div class="description scrollbar-hidden w-full overflow-scroll mask-t-to-[calc(var(--space)*2)] mask-exclude max-md:hidden">
                        <p class="text-normal pb-[calc(var(--space)*2)]">{description}</p>
                    </div>
                    <div class="actions flex w-full flex-row items-start justify-start gap-[calc(var(--space)*4)]">
                        <a href={url} class="button button-outline-primary">
                            <span>Ver m√°s</span>
                        </a>
                        {video && (
                            <a href={video} target="_blank" class="button button-fill-primary">
                                <i class="ibm-video" />
                            </a>
                        )}
                    </div>
                </div>
            ))
        }
    </div>
    <div
        class="hero-image animate-clip-bottom animation-delay-500 group absolute top-0 right-0 h-[calc(100%-3.5rem-4*var(--space))] w-[calc(100%-var(--space-y))] overflow-hidden md:top-(--space-y) md:right-(--space-x) md:h-[calc(100%-var(--space-y)*2)] md:w-[calc(50%+var(--space-overflow)-var(--space-x))]">
        {
            data?.map(({ date, name, image }, i) => (
                <div class:list={{ selected: i === 0 }} class="absolute h-full w-full">
                    <img
                        src={image}
                        alt={`${name} ${date!.getFullYear()}`}
                        decoding="async"
                        class="h-full w-full scale-105 object-cover object-center transition-transform duration-300 md:group-hover:scale-115 md:group-hover:transition-[scale]"
                    />
                </div>
            ))
        }
    </div>
    <div
        class="controls animation-delay-[375ms] animate-fade md:animate-clip-left md:animation-delay-1000 absolute right-0 bottom-0 z-10 flex flex-row items-center justify-end md:right-(--space-x) md:bottom-(--space-y)">
        <button
            class="prev button button-fill-primary md:bg-background md:hover:bg-background-hover md:text-foreground max-md:hidden">
            <i class="ibm-chevron-left"></i>
        </button>
        <button
            class="next button button-fill-primary md:bg-background md:hover:bg-background-hover md:text-foreground">
            <i class="ibm-chevron-right"></i>
        </button>
    </div>
</section>

<script>
    let ticking = false;
    let desktop = false;
    let index = 0;
    const section = document.body.querySelector<HTMLElement>("main > section#viajes")!;
    const subtitles = [...section.querySelectorAll<HTMLSpanElement>(".subtitle > span")];
    const titles = [...section.querySelectorAll<HTMLHeadingElement>(".title > h1")];
    const titlesLabels = [...section.querySelectorAll<HTMLHeadingElement>(".title > span")];
    const contents = [...section.querySelectorAll<HTMLDivElement>(".content > div")];
    const heroImage = section.querySelector<HTMLDivElement>(".hero-image")!;
    const images = [...section.querySelectorAll<HTMLImageElement>(".hero-image > div")];

    // Mouse listener
    const mousemoveCallback = (e: MouseEvent) => {
        if (!ticking) {
            window.requestAnimationFrame(() => {
                const img = images.at(index)?.querySelector<HTMLImageElement>("img");

                if (img) {
                    const rect = img.getBoundingClientRect();
                    const mousex = e.clientX - rect.left;
                    const mousey = e.clientY - rect.top;
                    const x = (mousex - rect.width / 2) / 40;
                    const y = (mousey - rect.height / 2) / 40;

                    img.style.transform = `translate(${x}px, ${y}px)`;
                    ticking = false;
                }
            });
            ticking = true;
        }
    };

    const mouseoutCallback = () => {
        const img = images.at(index)?.querySelector<HTMLImageElement>("img");

        if (img) {
            img.style.transform = "";
        }
    };

    // Click listener
    const clickCallbackPrevTrip = () => {
        const newIndex = index - 1 >= 0 ? index - 1 : subtitles.length - 1;

        [subtitles, titles, titlesLabels, contents, images].forEach((e) => {
            e.at(index)?.classList.remove("selected");
            e.at(newIndex)?.classList.add("selected");
        });
        index = newIndex;
    };

    const clickCallbackNextTrip = () => {
        const newIndex = index + 1 >= subtitles.length ? 0 : index + 1;

        [subtitles, titles, titlesLabels, contents, images].forEach((e) => {
            e.at(index)?.classList.remove("selected");
            e.at(newIndex)?.classList.add("selected");
        });
        index = newIndex;
    };

    section
        .querySelector<HTMLButtonElement>(".controls > .prev")!
        .addEventListener("click", clickCallbackPrevTrip);
    section
        .querySelector<HTMLButtonElement>(".controls > .next")!
        .addEventListener("click", clickCallbackNextTrip);

    // Resize listener
    const resizeCallback = () => {
        if (window.innerWidth >= 48 * 16 && !desktop) {
            heroImage.addEventListener("mousemove", mousemoveCallback);
            heroImage.addEventListener("mouseout", mouseoutCallback);
            desktop = true;
        } else if (window.innerWidth < 48 * 16 && desktop) {
            const img = images.at(index)?.querySelector("img");

            heroImage.removeEventListener("mousemove", mousemoveCallback);
            heroImage.removeEventListener("mouseout", mouseoutCallback);
            if (img) {
                img.style.transform = "";
            }
            ticking = false;
        }
    };

    window.addEventListener("resize", resizeCallback);
    resizeCallback();
</script>
