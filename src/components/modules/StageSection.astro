---
import type { BaseProps } from "@models/props";

export interface Props extends BaseProps {
    stages: {
        title?: string;
        image?: string | null;
        url: string;
    }[];
}

const { stages, id, style, class: cls } = Astro.props;
const currentStage = stages.findIndex(({ url }) =>
    Astro.url.href.includes(url)
);
---

{
    currentStage === -1 ? (
        <>
            <section
                {id}
                {style}
                class:list={cls}
                class="stage-section animation-delay-[375ms] animate-fade flex w-full flex-col items-start justify-start gap-[calc(var(--space)*4)]">
                <div class="scroll scrollbar-hidden relative -left-(--space-x) w-[calc(var(--space-x)*2+100%)] snap-x snap-mandatory scroll-px-(--space-x) overflow-x-scroll scroll-smooth">
                    <div class="stages flex w-max flex-row items-start justify-start gap-[calc(var(--space)*4)] px-(--space-x)">
                        {stages.map(({ title, image, url }) => (
                            <a href={url} class="card snap-start">
                                <div class="image">
                                    <img
                                        src={image}
                                        alt={title}
                                        decoding="async"
                                        class="img"
                                    />
                                </div>
                                <span class="caption">{title}</span>
                            </a>
                        ))}
                    </div>
                </div>
                <div class="controls flex w-full flex-row items-center justify-end max-md:justify-start">
                    <button class="button prev button-fill-primary">
                        <i class="ibm-chevron-left" />
                    </button>
                    <button class="button next button-fill-primary">
                        <i class="ibm-chevron-right" />
                    </button>
                </div>
            </section>
            <script>
                const container = document.body.querySelector<HTMLDivElement>(
                    ".stage-section > .scroll"
                )!;
                const cards = [...container.querySelectorAll<HTMLDivElement>(".card")];

                const clickCallbackPrev = () => {
                    const scrollLeft = container.scrollLeft;
                    const scrollPadding = parseFloat(
                        getComputedStyle(container).scrollPaddingInline
                    );
                    const prevCard = cards.findLast(
                        ({ offsetLeft }) => offsetLeft - scrollLeft < scrollPadding - 2
                    );

                    if (prevCard) {
                        container.scrollTo({
                            left: prevCard.offsetLeft - scrollPadding,
                            behavior: "smooth"
                        });
                    }
                };
                const clickCallbackNext = () => {
                    const scrollLeft = container.scrollLeft;
                    const scrollPadding = parseFloat(
                        getComputedStyle(container).scrollPaddingInline
                    );
                    const nextCard = cards.find(
                        ({ offsetLeft }) => offsetLeft - scrollLeft > scrollPadding + 2
                    );

                    if (nextCard) {
                        container.scrollTo({
                            left: nextCard.offsetLeft - scrollPadding,
                            behavior: "smooth"
                        });
                    }
                };

                document.body
                    .querySelector<HTMLButtonElement>(".stage-section > .controls .prev")!
                    .addEventListener("click", clickCallbackPrev);
                document.body
                    .querySelector<HTMLButtonElement>(".stage-section > .controls .next")!
                    .addEventListener("click", clickCallbackNext);
            </script>
        </>
    ) : (
        <section
            {id}
            {style}
            class:list={cls}
            class="stage-section animation-delay-[375ms] animate-fade flex w-full flex-row items-center justify-between max-md:justify-start">
            {currentStage > 0 ? (
                <a
                    href={stages[currentStage - 1]!.url}
                    class="button prev button-fill-primary">
                    <i class="ibm-chevron-left" />
                </a>
            ) : (
                <a
                    href={Astro.url.pathname.split("/").slice(0, -1).join("/")}
                    class="button home button-fill-primary">
                    <i class="ibm-home" />
                </a>
            )}
            <div class="stages flex flex-row flex-wrap items-center justify-center">
                {stages.map(({ url }, i) =>
                    currentStage !== i ? (
                        <a
                            href={url}
                            class="button button-muted font-semibold max-md:hidden">
                            {i + 1}
                        </a>
                    ) : (
                        <span class="button button-primary cursor-default font-semibold">
                            {i + 1}
                        </span>
                    )
                )}
            </div>
            {currentStage < stages.length - 1 ? (
                <a
                    href={stages[currentStage + 1]!.url}
                    class="button next button-fill-primary">
                    <i class="ibm-chevron-right" />
                </a>
            ) : (
                <div class="w-14" />
            )}
        </section>
    )
}
